datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
    relationMode = "prisma"

}
generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  CUSTOMER
  ADMIN
}

enum ProductStatus {
  AVAILABLE
  OUT_OF_STOCK
}

enum OrderStatus {
  UNDER_REVIEW
  PAYMENT_PENDING
  OUT_FOR_DELIVERY
  DELIVERED
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    address   String?
    phone     String?
    profileCreated   DateTime?
    accounts      Account[]
    sessions      Session[]
    role      UserRole   @default(CUSTOMER)
    orders    Order[]
    messages  Message[]
    cartItems CartItem[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}


model Product {
  id          Int            @id @default(autoincrement())
  name        String
  description String
  brandName   String
  price       Float
  images      String[]
  status      ProductStatus  @default(AVAILABLE)
  orders      ProductOrder[]
  cartItems   CartItem[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model Order {
  id          Int            @id @default(autoincrement())
  userId      String
  status      OrderStatus    @default(UNDER_REVIEW)
  totalAmount Float
  products    ProductOrder[]
  note        String?
  createdAt   DateTime       @default(now())
  user        User           @relation(fields: [userId], references: [id])
}

model ProductOrder {
  id          Int      @id @default(autoincrement())
  productId   Int
  orderId     Int
  quantity    Int
  product     Product  @relation(fields: [productId], references: [id])
  order       Order    @relation(fields: [orderId], references: [id])
}

model Message {
  id          Int      @id @default(autoincrement())
  userId      String
  content     String
  sentAt      DateTime @default(now())
  isRead      Boolean  @default(false)
  user        User     @relation(fields: [userId], references: [id])
}

model CartItem {
  id          Int      @id @default(autoincrement())
  userId      String
  productId   Int
  quantity    Int      @default(1)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}
